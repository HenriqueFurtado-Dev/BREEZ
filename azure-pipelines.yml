trigger:
- main

variables:
  # Conexão ARM criada no Azure DevOps
  azureSubscription: '98571f40-f262-45cc-b840-1fb739397b7a'

  # Nome do Web App no Azure
  webAppName: 'breez'

  # Ambiente para Deploy (nome do “environment” no Azure DevOps)
  environmentName: 'breez'

  # VM image usada pelos agentes Hosted (já traz JDKs pré-instalados e disponíveis no cache)
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: MavenPackageAndPublishArtifacts
    displayName: Maven Package and Publish Artifacts
    pool:
      vmImage: $(vmImageName)

    steps:
    # 1) Instala o JDK 21 (do cache do Azure DevOps)
    - task: JavaToolInstaller@0
      displayName: 'Install JDK 21'
      inputs:
        jdkSourceOption: 'AzurePipelines'   # procura o JDK 21 no cache oficial do agente
        versionSpec: '21'                   # versão alvo
        jdkArchitectureOption: 'x64'        # arquitetura

    # 2) Build do Maven usando JDK 21
    - task: Maven@4
      displayName: 'Maven Package'
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'       # indica que usaremos o JDK instalado via versionSpec
        jdkVersionOption: '21'             # deve coincidir com o versionSpec acima
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'clean package'

    # 3) Copia o artefato (.jar ou .war) para o artifact staging directory
    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/*.?(jar|war)'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    # 4) Publica o artifact para ser usado no Deploy
    - upload: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployLinuxWebApp
    displayName: Deploy Linux Web App
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          # 5) Publica no Azure App Service Linux apontando para o jar/war gerado
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: breez'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              package: '$(Pipeline.Workspace)/drop/**/*.jar'
